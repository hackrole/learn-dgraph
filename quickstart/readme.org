* define grpahql schema let the dgraph do the rest
 
** the schema define 

   #+begin_src graphql :tangle schema.graphql
     type Product {
       productID: ID!
       name: String @search(by: [term])
       reviews: [Review] @hasInverse(field: about)
     }

     type Customer {
       username: String! @id @search(by: [hash, regexp])
       reviews: [Review] @hasInverse(field: by)
     }

     type Review {
       id: ID!
       about: Product!
       by: Customer!
       comment: String @search(by: [fulltext])
       rating: Int @search
     }
   #+end_src
  
** run dgraph standalone with docker
   
   #+begin_src bash
     docker run -d --name dgraph-standalone --restart always -p 8080:8080 dgraph/standalone:master
   #+end_src


** add graphql schema to dgraph

   #+begin_src bash
     curl -X POST localhost:8080/admin/schema --data-binary '@schema.graphql'
   #+end_src


  
** TODO query and mutation example 


   #+begin_src bash
     http -v --ignore-stdin POST localhost:8080/graphql query="query {queryReview(filter: {comment: {alloftext: \"easy to intall\"}}) {comment by {username} about {name}}}"
   #+end_src

   #+RESULTS:

   #+begin_src bash
     (
     cat <<EOF
     {
       "query": "{
          query {
            queryReview(filter: {comment: {alloftext: \"easy to install\"}}){
              comment
              by {
                username
              }
              about {
                name
              }
            }
          }
       }"
     }
     EOF
     ) | http -v POST localhost:8080/graphql
   #+end_src

   #+RESULTS:

   #+begin_src bash
     http -v --ignore-stdin POST localhost:8080/graphql query="{queryUser { username}}"
   #+end_src

   #+RESULTS:

   #+begin_src http :pretty
     POST http://localhost:8080/graphql
     Content-Type: application/json

     {"query": " query {\n queryUser { username} } "}
   #+end_src
